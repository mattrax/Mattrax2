package enrollpolicy

import (
	mattrax "github.com/mattrax/Mattrax/internal"
	"github.com/mattrax/Mattrax/internal/types"
	"github.com/mattrax/Mattrax/mdm/windows/protocol/generic"
	"github.com/mattrax/Mattrax/pkg/xml"
	"github.com/pkg/errors"
)

type Request struct {
	XMLName xml.Name       `xml:"s:Envelope"`
	Header  generic.Header `xml:"s:Header"`
}

func (cmd Request) Verify(config mattrax.Config, userService types.UserService) error {
	/* Verify Structure: Lightwieght structure and datatype checks */
	if err := cmd.Header.VerifyStructure("http://schemas.microsoft.com/windows/pki/2009/01/enrollmentpolicy/IPolicy/GetPolicies", true); err != nil {
		return err
	}

	/* Verify Context: Expensive checks against the server's DB */
	if err := cmd.Header.VerifyContext(config); err != nil {
		return err
	}

	if cmd.Header.WSSESecurity.BinarySecurityToken != "" /* Federated Authentication */ {
		// TODO: Verify cmd.Header.WSSESecurity.BinarySecurityToken -> All to be generated by API
		return nil
	} else if cmd.Header.WSSESecurity.Username != "" /* On Premise Authentication */ {
		loggedIn, err := userService.VerifyLogin(cmd.Header.WSSESecurity.Username, cmd.Header.WSSESecurity.Password)
		if err != nil {
			return err
		} else if !loggedIn {
			return errors.New("the users login is incorrect")
		}
		return nil
	} else {
		return errors.New("DEVELOPER MISTAKE: THIS SHOULD NEVER HAPPEND, PLEASE REPORT: no supported client authentication details received")
	}
}
